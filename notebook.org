#+TITLE: IIR Hardware Notebook

* Wednesday, 1/11/17
	Start: 2:00PM

	I started actually creating the VHDL file. I started by just placing the
	things that I believed needed to be there. The entity and architecture were
	built kinda.

	End: 5:00PM

	Start: 7:45PM

	I found a [[https://github.com/tgingold/ghdl][program]] that will simulate VHDL. My entire design is screwed up!

	I basically worked out most of the kinks /except/ the arrays aren't happy.

	End: 8:50 PM

* Thursday, 1/12/17
	Start: 7:45PM

	Attempting to fix these arrays...

	I fixed the arrays... They're even worse than I thought! Damn you VHDL... Damn
	you.

	Anyways, I'm ready to test my FIR design. Vivado! Oh Vivado, where art thou
	Vivado!?

	*IMPORTANT NOTE: GHDL seems to think certain pieces of "code" are incorrect*
  *when they seem perfectly fine. As of now, I'm assuming GHDL is making*
  *mistakes and will test it out in Vivado someday.*

	End: 8:37PM
* Friday, 1/13/17
	Start: 3:00PM

	I began working with Vivado to hopefully see if my FIR was working.

	Problem: I had many issues that were present. Such was declaring variables in
	the wrong part of the design. They /must/ go in a process /before/ the `begin'
	statement. Also, I had an issue with Vivado in general. I couldn't get the ILA
	working very well.

	I've decided to just go in and try it with actual voltages.

	Issues: There are a handful of issues that I will need to take care of before
	I can even do anything with the XADC.
	- I will need a GPIO to output the correct channel to the IP.
	- I need to get the IP to actually build.
	- Pain and suffering.

  End: 5:16PM

* Sunday, 1/15/17
	Start: 3:45PM

	I started out by editing a past project so that the Zynq processor will
	automatically reroute the ADC value to the newly created FIR IP. There are
	some issues that I'm running into, however.
	Issues:
	- Bitstream of the IP won't generate due to timing issues.
	- The timing of both the IP and the entire project may be off because of the
    following:
		- Timing failures of IP
		- Bad timing having to do the calculation and start the DA2 etc.

	*NOTE: IF I WISH TO DO JUST HARDWARE, I NEED A NEW FSM.*
	- However, the Zynq stuff worked, but I forgot to add the offset.

	*UPDATE: Instead of trying to do the /just/ hardware, I will use the Zynq as*
	*a rerouting device for the XADC values. This will allow me to not have to*
	*worry /too/ much about the timing parts.*

	After adding in the offset, I got a running average FIR working! (coeff values
	all set to 0x1999)

	Let us try another FIR filter and see how it works. (with internal coeffs to
	the IP).

	*I can't seem to get another FIR to work yet.*

	End: 6:23PM

* Monday, 1/16/17
	Start: 12:42PM

	I will attempt, once again, to get FIR working. I'll start by making sure the
	coeffs that I got from MATLAB are correct and do the right filter. (excel)

	- [X] Verified! The coeffs are correct.
	- [ ] FIR working

	I'm not getting anywhere and it's almost 3... I'm going to create a FSM inside
	the thing to hopefully help timing related issues that may be problematic.

	Well another waste of 3 hours.

	End: 3:29PM
* Tuesday, 1/17/17
	Start: 12:45PM

	I started to remake the entire project because you can't downgrade to an older
	version of Vivado...

	End: 1:45PM

	Start: 3:30PM

	Finished up making the new design. I also used a new and improved IP that
	contained an internal FSM.

	It works with the averager! (with 0x1999 as the all 5 coeffs)

	*Solved: Instead of grabbing 11 downto 0 of the big_output, I took 20*
	*downto 9.*

	I'm getting stuff out for a real FIR, however, it doesn't seem to be working
	correctly. What I mean is that the FIR functionality isn't there. I get the
	correct output frequency but the amplitude doesn't ever cutoff.

	End: 5:30PM

	Start: 8:15PM

	Time to revisit this FIR not functioning correctly issue. I believe it has
	something to do with the way that I'm doing the calculation. Thus, I am using
	a for loop to do the calculation, much like how we would do it in C.
	- My reasoning for this is because of pipelining. Pipelining will allow for
    higher frequencies. Although I'm not really pipelining for /real/, I'm doing
    something that will isolation the operations more.

	If this /isn't/ the issue, I'll have to blame it on the coeffs.

	*FAILURE: Using the for loop did NOT fix the issue.*

	I'm going to increase the number of bits of the coeffs. I doubt this will fix
	the issue, but it's worth a shot!

	If this that isn't the issue then I'm not sure what the problem is... :(

	It's not the issue :(((((( help

	Call police, PETA, CPS, amberlamps! ANYONE!

	Slice range from big_output:
	27-16: No change in amplitude
	26-15: No change in amplitude
	25-14: No change in amplitude
	24-13: No change in amplitude
	23-12: Too much voltage, but not clipping. No change in amplitude.
	22-11: Clipping and hideous. Not a feasible output.
	...
	20-9: No feasible output

	*I am unsure as to what the issue is at this point*

	*Problem: No change in amplitude. Even when output should be in cutoff.*
	- I am getting the correct frequencies out.
	- The outputs aren't beautiful, however, they are quite nice. (curviture)

	Possible reasons:
	- Overflowing of big_output variable? NOT THIS ONE (VERIFIED)
	- big_output not being signed?
	- try shifting instead of just slicing big_output?

	End: 10:54PM
* Wednesday, 1/18/17
	I spent some time today (about 1 hour) looking at a FIR design
	written in VHDL. It gave me a lot of insight and I have some ideas
	to fix the issues that I'm having.
* Thursday, 1/19/17
	Start: 12:45PM

	I'm starting off by changing the types of the signals and variables
	in the design.
	- The ins/outs are still /std_logic_vector/ but the data is converted
    into /signed/ and the calculations are completed in the type of
    /signed/. NOTE: Both big_output and the coeffs are now signed as
    well.

	Changing them to signed didn't work.

	End: 1:45PM

	Start: 3:30PM

	More troubleshooting.

	None of the things that I thought would fix the issue worked.

	I guess I'll have to redesign the entire IP to try and fix this
	issue.
* Friday, 1/20/17
	Start: 6:00PM

	We are going to try a new RTL design with a 4 tap summing averager.

	I can't see to get the done signal working with the RTL design, thus, I am
	going to edit my existing design to use the pipelining features found in the
	RTL design. I swear that if this doesn't work, I will cry tears of soy. If it
	does work, I'll cry tears of joy.

	Once again, nothing is working. This project sucks. If only we were acutally
	taught VHDL...

	Another waste of time.

	End: 9:03PM
* Sunday, 1/22/17
	Start: 2:18PM

	Here again.

	I've been trying stuff for about 2 hours and I can't seem to get the done
	signal to go high :(

	What the hell man. What did I do to deserve this!!!!!

	Note:
	While attempting to fix the `done' issues, I figured something out. I used a
	counter as a buffer because the eoc_out signal is very very fast (only 1 cycle
	high). As a direct result, I noticed (on the ILA) that even though the newly
	delayed eoc_out signal was on for a very very long time, the IP was still not
	recognizing the clock. This made me believe that for some reason the signal
	was being read in incorrectly. Well, this isn't the case either. While
	thinking of possible issues that may have been causing this issue I decided
	that maybe, for some reason, the IP couldn't get the rising edge of the
	delayed eoc_out signal, thus, I removed `rising_edge' logic and replaced it
	with the simple: "i_clk='1'". To my surprised, Vivado gave me some new
	warnings about certain signals that were read in (the processes) but not found
	in the sensitivity list. Interestingly enough, Vivado didn't complain about
	them not being on the sensitivity list before I changed the clocking
	logic. Another trait of these signals is that all of which that were warned
	were found in processes within the logic for the /rising_edge/ of the
	clock. I'm wondering if this is what is causing my `done' issues. We shall
	see.

	After testing this theory, I was at a loss of words because it didn't help the
	issue at all. It seems like the IP isn't responding to the clock at all. I'm
	going to try switching the IP from RTL to Behavioral. I doubt this means
	anything but I'm going to test it. If it doesn't do anything, I'm going to go
	to my project that has a working done signal and attempt to make the necessary
	changes.


	*WHELP FOUND OUT WHAT ONE (1) OF THE PROBLEMS IS..... THE RESET LOGIC WAS SET*
	*FOR WHEN THE RESET BUTTON WAS LOW.... BUTTONS ARE LOW BY DEFAULT.... BECAUSE*
	*OF THAT NOTHING COULD BE COMPLETED. LIFE'S BLEAK.*

	Alright, kids here we go:
	After noticing the reset issue, I tried it and... IT WORKED. The summing
	average worked! 4 coeffs at 0.2 worked. I decided then to change things that
	maybe wouldn't have to be there and well... It broke. After fixing it again I
	realized how to get it working. Turns out, the new data and inputting of the
	coeffs (found in process p_input) must be done at the /rising_edge/ of the
	clock but the rest can be done whenever the clock is high. I found that this
	works best. After realizing this issue, I attempted to try a 3rd order lowpass
	filter and that worked as well. See the pictures found in the `FIR' directory
	of this repo.

	NOTE: The coeffs I used for the lowpass filter are: '(0.2119 0.4718 0.4718
	0.2119).

	NOTE: The filter doesn't work 100% perfect. It is supposed to fully cutoff at
	35kHz but mine cuts off at about 20kHz. I don't think this is a huge deal
	mostly becuase we are talking about a 3rd order filter, which wouldn't be very
	accurate anyways.

	End: 7:28PM (I stayed a little later to work on logic for the Zynq part)
* Monday, 1/23/17
	Start: 1:03PM

	I'm going to test another FIR filter. This time a high pass.

	The high pass coeffs are: '(.013735766 -.688 .687646095 -.013735766)
	It works! Check out the `fir-highpass' image found in the `fir' directory.

	Very quickly I am going to see if I can get a better amplitude out but
	shifting the sliced bits in the IP.

	I got a very nice output!

	However, while attempting to create an IIR IP, Vivado decided to delete the
	source file... Now I have to recreate it...

	The IIR filter will be a 3rd order highpass filter that should cutoff at 10k.
	The coeffs are (in single section form):
	a = '(1 -1.76 1.18289 -.27805)
	b = '(.527624 -1.58287 1.58287 -.527624)

	Seems like the IIR is giving me shit. A lot of it too. Seems like the ouput is
	too large, this may be because of the addition between the feedforward and
	feedback. We shall see.

	Turns out that I'm not getting anything out of the DA, we shall look into this
	later.

	I got my weekly meetnig checked off.

	End: 3:50PM
* Tuesday. 1/24/17
	CLOCK: [2017-01-24 Tue 11:54]--[2017-01-24 Tue 13:42] =>  1:48
	Just learned about the timeclock feature in org-mode... This is awesome.

	Today I am going to see if I can figure out why I get no output with the IIR
	IP.

	I'm not quite sure what is causing this problem, however, I'm trying a bunch
	of different things that /may/ be related to the issue. So far Ive:
	- Removed 3 processes because you can do the feedback and feedforward
    calculations in the same process.
		- This changed *nothing* in the elaborated design. Thus, it meant nothing
      except less LOC.
	- Changed the `out_buf' variable to a signal.
		- This also made no difference.
	- I replaced which process the new feeback data is placed. My reasoning for
    this is because it would trigger the second process (p_add_st0) immediately
    after the data is shipped out; causing an endless loop where the new input
    data (from the XADC) would never be read.
		- This actually worked!!! I think I'm getting the hang of this hardware
      design thing.

	NOTE: In the `iir' directory there will be screenshots of the IIR outputs from
	the network analyzer. The `iir-highpass-test1.png' file is the first working
	IIR. It isn't exactly right so I'm considering it a test.

	CLOCK: [2017-01-24 Tue 15:42]--[2017-01-24 Tue 16:55] =>  1:13

	Yay, I got a much better output this time. The issue from before was that the
	coeffs weren't in range for a 15 bit signed number, thus, Vivado was
	truncating the values. To fix this I just adjusted the coeffs respectively.

	I'm going to try and make a notching filter with a bandwidth of 10k (3rd
	order).

	It's not beautiful and doesn't really act correctly, but it does have
	notch-like features that are almost right. I dunno. Good enough.

	Let us think about how we are going to make things more generic.
	- Changing the order will pick how many coeffs will be fed in (just think
    hardware right now, no zynq yet)
	- Have the maximum number of possibilies laid out BEFORE you mess with trying
    inbetween values.
		- Keep in mind, before we get Zynq support, the sythesizer will remove
      unused registers. However, once the Zynq is involved, it /should/ work
      out.
	- Make sure you don't have overflows. :))

* Monday, 2/20/17
	CLOCK: [2017-02-20 Mon 18:30]--[2017-02-20 Mon 20:20] =>  1:50

	After spending some time figuring out the logic behind the generic IIR in
	hardware, it is time to create it.

	May it be noted on this day that you cannot have that many outputs and interal
	signals on the Zynq. I must find a better way.
	- In fact, I can't even do it with 8 coeffs. Too many I/O ports. I guess I
    will need to come up with a better way to ship in the
* Thursday, 2/23/17
	CLOCK: [2017-02-23 Thu 16:29]--[2017-02-23 Thu 18:16] =>  1:47

	I'm starting to try my communication method.


	After creating the Zynq software and after some very easy debugging I got a
	sucessful highpass filter using the coeffs from the first IIR highpass I did.
	Now I must update the system (IP and Zynq) to handle 16 coeffs max. Before I
	leave tonight, I'm going to see if I can even create an IP with that many
	possible (without the overflow error).

	Congratulations! I can make a 16 coeff IP :D

	That is all for today.
* Monday, 2/27/17
	CLOCK: [2017-02-27 Mon 18:12]--[2017-02-27 Mon 21:29] =>  3:17

	It's time to test out 16 coeff (15th order) transferring.


	My first try was a lowpass filter that cuts off at 20k, it kind of works but
	doesn't really pass inspection.

	New bug: When creating a single section the a coeffs are way too large. Looks
	like I'm going to have to do this the hard way -- second order sections...

	So I've got most of the logic down to allow for 8 second stage calculations,
	that equates to a 15th order filter, just like I wanted.

	I wrote most of the IP however, I'm out of time for tonight. The parts that I
	wrote synthesized and implemented, which means I haven't gone over the
	internal limit of signals. (a concern of mine)

	In theory, this should allow you to make any filter that is 15th order or
	below and does the calculations using 8 (or less) second stage filters. Right
	now I don't have the gains in there but if I about the right output, then I'll
	be happy and add that in.

	This concept isn't game over if it doesn't work either!
	- The next idea will be having second order IP that are cascaded, if you wish
    to do a smaller filter (or a bigger one), you can either add more
    (re-synthesize needed) or set the coeffs to zero.
	- At this point, my new idea seems doable, but we will actually find out later
    this week.
* Tuesday, 2/28/17
	CLOCK: [2017-02-28 Tue 19:05]--[2017-02-28 Tue 21:54] =>  2:49

	Time to see if I can get this multi-staged filter IP working.

	Possible Bugs:
	- The shifting of the data arrays goes the wrong way.
		- This would mean the calculations would be done backwards. This
      would be fine if we had symmeteric coeff arrays, however, 2nd
      second does not.
		- This would have to do with the
     	r_s0_data <= resize(r_out_data(0), 12)&r_s0_data(0 to r_s0_data'length-2);
			part.
	- The design flat out doesn't work
		- This is probably the most likely of all the possible bugs.
		- Since all the stages are calculated "at the same time," we might
      run into issues there. However, we might be okay and just have a
      delay that is/isn't noticable.
	- The slicing of internal data regesters isn't correct.
		- Sadly, there isn't a good way to do this so if this is a major
      issue, there really isn't a good solution that I can think of.
		- Using `resize' doesn't work either, I've already had a bug using
      that function. The resize function simply takes the sign bit and
      tacks it onto the front of the *least significant bits*. This
      means you'll never see anything.
		- I believe that slicing from 26 downto 15 is a good spot,
      however, it may become an issue.
	- If you wish to use a filter that uses less than 8 sections, you
    won't get the output you wish.
		- My theorectical fix to this issue is to use an input signal that
      tells the IP which internal data regester to output.
		- Hopefully, it will use a mux to figure that out, if not, I'm
      afraid we are at a standstill. If this bug exists, this entire
      concept must be rethought or throw away.

	My first attempt at using this new design was a failure. However, I
	found 2 bugs in the code:
	1. The b coeff loop had an incorrect signal, however, it really
     didn't cause any problems
	2. I was using the `resize' function to resize the internal data
     arrays. I believe this is way I was always getting nothing out.
		 1. The `resize' functions slices the *rightmost* bits and tacks
        on the sign bit. This means that when I was attempting to
        resize to 12 bits, I was getting very small (or basically
        zero) values being shifted in to the main data
        regesters. Obviously, I would be seeing nothing output if that
        were the case!
		 2. UPDATE: This was /not/ the problem.


	Well I think I'm going to label this as a dead end. I'm going to
	think about other possibilies but I'm not sure if I will be able to
	get this concept to work.

	Next time, I'm going to work on getting cascading 2nd Order Filters
	working.
* Monday, 3/20/17
	CLOCK: [2017-03-20 Mon 18:22]--[2017-03-20 Mon 20:42] =>  2:20

	It is time to test out my new multi-stage design.

	I created 2 new IPs tonight:
	- dmux
		- A de-multiplexer for the coeff_clk. This allows me to select which IP gets
      loaded by toggling which one gets the coeff_clk.
	- mux
		- A multiplexer for the outputs. If you wish to create a smaller filter, you
      can select which stage you want the output to come from. For example, if
      you only wanted a 2 staged 4th order filter, you would select stage 1 as
      the output.


	To my surprise, it worked. It's not pretty and looks like the output was
	smaller than it should be. I will attempt to make that look better at a later
	date. See the generic-staged-iir directory in this repo for pictures of the
	semi-working filters.

	Notes:
	- The output was smaller than what it should be.
		- This could be because of the slicing (or part of the next note).
	- The output of stage 0 was better than stage 1.
		- This could mean that the outputs are getting smaller and smaller. This
      will be tested once I add more stages. A possible fix would be to have the
      inputs of the filters be 32 bit and pass the entire 32 bit output
      values. I would have to use a resize on stage 0. We shall see.
* Tuesday, 3/21/17
	CLOCK: [2017-03-21 Tue 18:12]--[2017-03-21 Tue 21:40] =>  3:28

	I'm going to attempt to fix 1 of the bugs mentioned at the end. Specifically
	the bug regarding the small output.

	I'm going to first switch Fs to 8kHz. This may help with the impurity at the
	end (high freqs) of the filters. Next, I'm just going to increase the slice
	MSB.

	Well, increasing slice MSB worked sort of. It's still too low. This makes me
	think that it's the probably regarding the stages making the output too
	small[1]. Also, regarding the impurity at the end: The fix is to just stay away
	from Fs/2. About 1-2 div before Fs/2, you will see some impurity. I'm not
	entirely sure why but even with 8kHz = Fs, it has the impurity around 1-2
	div before Fs/2. I'm going to set it back to 100kHz and just look at <10kHz
	and see what it looks like. After I test that and get some results, I will
	attempt to add more stages and see what happens.

	Looks like something went majorly wrong beacuse I'm not getting any good
	output. The amplitude is completely off and very small. I need to revaluate
	the slices.

	# 1 hour break

	My first test with all of the stages will be a simple high pass filter that
	cuts off between 1k and 2k with an Fs of 100k. It has all 8 sections so we
	will see what happens.


	Well, it didn't work. I can only get an output at stage 1. There is also a
	critial warning about how some of the inputs to the mux are not
	connected. This makes me think there is some issue with most of the IIR
	IPs. Even though i_6 and i_7 are not on the list, they would be getting no
	data input into them. I checked the elaborated design and didn't see anything
	that was misplaced. I will have to troubleshoot this I guess.



[1] Stage 0 had about the same output amplitude as stage 1 in the 8k test. In
fact, strage 1 actually had a /better/ output than stage 0 in terms of
smoothness and consistance. The amplitude really didn't change.
* Thursday, 3/23/17
	CLOCK: [2017-03-23 Thu 20:47]--[2017-03-23 Thu 22:31] =>  1:44

	I'm going to attempt to fix some of these bugs.

	Firstly, the critial warning about un-sourced pins went away by itself.
	Secondly, no matter what I put into the IPs, I get a very shitty highpass
	filter that cutoff somewhere around 20k. I have no idea. I'm going to go back
	to a 2 stage and see if I can get that to work. Then i will slowly increase
	the number of stages.

	Turns out that after stage 0, you get that 20k highpass bug. This might have
	to do with the done signal, since that is the only difference.


	I switched the clock on stage 1 to use the same clock as stage 0 and I'm
	getting lowpass functionality, however, highpass doesn't seem to be
	working. This could just be beacuse of the output being very very small
	(-50dB). That is going to be the next bug I tackle because I cannot go any
	further without having that fixed.


	Here's the deal. I've created a resize IP to resize the XADC output to 32
	bits. This way the IIR IPs can use 32 bit for everything. This /should/ remove
	the small values. The output will then be sliced to the 12 bit value,
	somewhere around 28-15. I have the resize IP created (not tested) and am
	waiting until Sunday to work on the refactor of IIR IP.

* Sunday, 3/26/27
	CLOCK: [2017-03-26 Sun 20:04]--[2017-03-26 Sun 23:23] =>  3:19

	Time to try to fix some stuff.

	So I finally got a decent voltage coming out! However, I still cannot get the
	filters to act how they should. I'm stuck getting a highpass filter
	everytime. Here are some possible problems:
	- Using `done' as the clock for the next doesn't work.
	- Using the same clock for them all doesn't work
	- 32 bit is too small for the numbers being calculated
	- The gains are missing


	That is all for tonight. Asa-la-pasta
* Monday, 3/27/17
	CLOCK: [2017-03-27 Mon 18:05]--[2017-03-27 Mon 19:54] =>  1:49

	More troubleshooting!!

	I don't know what is wrong.
* Tuesday, 2/28/17
	CLOCK: [2017-03-28 Tue 15:41]--[2017-03-28 Tue 23:23] =>  7:42

	Working on the bugs.

	Turns out the multistage is what causes the problem, stuff works to some
	degree if I use a single stage.


	That's all I figured out after 7 hours...
* Thursday, 3/30/17
	CLOCK: [2017-03-30 Thu 15:10]--[2017-03-30 Thu 18:24] =>  3:14

	I tried some more stuff and finally got something working.

	I swithced the IP to use 32 bit values and I am getting a good output now.
	The lowpass seems to work alright (even with sectioned coeffs) but I can't
	seem to get highpass. At least I have one bug "fixed."
