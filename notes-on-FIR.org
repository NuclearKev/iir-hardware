p_data: a signal for t_data_pipe which is an array with 4, 8bit elements
r_coeff: a signal for t_coeff which is an array with 4, 8bit elements
r_mult: a signal for t_mult which is an array with 4, 16 bit elements
r_add_st0: a signal for t_add_st0 which is an array with 2, 15+1 (17?) elements
r_add_st1: is a signed 15+2 downto 0 signal

On every rising edge of the input clock:
- New data is placed in p_data
- All coeffs are loaded
- FIR multiplications are completed
- FIR additions are completed
	- A stage 0 addition, into a temp array
	- A state 1 addition with the temp array elements, into a temp signal
- Filter data is output as a /std_logic_vector/

Things to note:
- Inputs are /std_logic_vectors/
- They are converted to /signed/ types and stored into internal registers
- Multiplications are done in a /for loop/ and are /pipelined/ with an array
- Additions are done in a /for loop/ and are /pipelined/ with an array
- All of which are done in separate processes that are sensitive to the input
  clock

My design:
- [X] Inputs are /std_logic_vectors/
- [ ] convert them into the /signed/ type and store them into internal registers
	- [ ] Start the coeffs as signed as well
	- [ ] The /data/ array should also be signed, and the input data must be cast
    into signed
- [ ] Pipeline the multiplications/additions better
	- Use temporary array and signals to store values
	- Maybe use separate processes?
